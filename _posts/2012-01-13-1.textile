---                                                                                                                                 
title: JAVA SoftReference and WeakReference                                                                                                               
layout: post                                                                                                                        
---                                                                                                                                 
                                                                                                                                    
A *__"soft reference":http://docs.oracle.com/javase/6/docs/api/java/lang/ref/SoftReference.html__* is a special form of object reference. *_"Soft references":http://docs.oracle.com/javase/6/docs/api/java/lang/ref/SoftReference.html_* can be released at any time at the discretion of the garbage collector. In reality however, they are released only to avoid an out-of-memory error. In this respect, they differ greatly from *_"weak references":http://docs.oracle.com/javase/6/docs/api/java/lang/ref/WeakReference.html_*, which never prevent the garbage collection of an object. Soft References are very popular in cache implementations for precisely this reason. The cache developer assumes, correctly, that the cache data is to be released in the event of a memory shortage. If the cache is incorrectly configured, however, it will grow quickly and indefinitely until memory is full. When a GC is initiated, all the soft references in the cache are cleared and their objects garbage collected. The memory usage drops back to the base level, only to start growing again.This phenomenon can easily be mistaken to be an incorrectly configured young generation. It looks as if objects get tenured to early only to be collected by the next major GC. This kind of problem often leads to a GC tuning exercise that cannot succeed.